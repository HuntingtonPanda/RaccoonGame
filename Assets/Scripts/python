import numpy as np
import matplotlib.pyplot as plt

# --- Single-bit response h(t) for a 1-µs-wide "1" starting at t=0 (from the given graph) ---
def h_rel(x):
    x = np.asarray(x)
    y = np.zeros_like(x, dtype=float)
    # 0 to 0.1: 0 → 1  (slope 10 V/us)
    m = (0 <= x) & (x < 0.1)
    y[m] = 10 * x[m]
    # 0.1 to 0.5: 1 → 2 (slope 2.5 V/us)
    m = (0.1 <= x) & (x < 0.5)
    y[m] = 1 + 2.5 * (x[m] - 0.1)
    # 0.5 to 0.9: 2 → 1 (slope -2.5 V/us)
    m = (0.5 <= x) & (x < 0.9)
    y[m] = 2 - 2.5 * (x[m] - 0.5)
    # 0.9 to 1.0: 1 → 0 (slope -10 V/us)
    m = (0.9 <= x) & (x < 1.0)
    y[m] = 1 - 10 * (x[m] - 0.9)
    # 1.0 to 1.25: 0 → -0.5 (slope -2 V/us)
    m = (1.0 <= x) & (x < 1.25)
    y[m] = -2 * (x[m] - 1.0)
    # 1.25 to 1.5: -0.5 → 0 (slope +2 V/us)
    m = (1.25 <= x) & (x < 1.5)
    y[m] = -0.5 + 2 * (x[m] - 1.25)
    return y

# --- Time axis (µs) ---
t = np.linspace(0, 2.0, 3001)

# Supersonic bits: start times and pattern 1 0 1
starts = [0.0, 0.25, 0.5]
bits   = [1, 0, 1]

# Individual components
h0 = h_rel(t - starts[0]) if bits[0] == 1 else np.zeros_like(t)
h1 = np.zeros_like(t)     # middle bit is 0 → plot a flat 0-V line between 0.25–0.5 µs
h1_plot = np.full_like(t, np.nan)
h1_mask = (t >= 0.25) & (t <= 0.5)
h1_plot[h1_mask] = 0.0

h2 = h_rel(t - starts[2]) if bits[2] == 1 else np.zeros_like(t)

# Sum (superposition)
y_total = h0 + h2  # (middle bit adds nothing)

# Sampling instants
samples = np.array([0.5, 0.75, 1.0])
vals = np.interp(samples, t, y_total)

# Decode with 1 V threshold
decoded = [1 if v >= 1.0 else 0 for v in vals]

# --- Plot (single chart) ---
plt.figure()
plt.plot(t, h0, label="Bit 1: h(t-0)")
plt.plot(t, h1_plot, label="Bit 2: 0 V (0.25–0.5 µs)")
plt.plot(t, h2, label="Bit 3: h(t-0.5)")
plt.plot(t, y_total, linewidth=2, label="Sum = Bit1 + Bit3")

# sampling markers and annotations
plt.scatter(samples, vals, zorder=5, label="Samples (0.5, 0.75, 1.0 µs)")
for s, v in zip(samples, vals):
    plt.annotate(f"{v:.2f} V", (s, v), xytext=(5, 6), textcoords="offset points")

plt.title("Supersonic Bits: starts at 0, 0.25, 0.5 µs; samples at 0.5, 0.75, 1.0 µs")
plt.xlabel("Time (µs)")
plt.ylabel("Voltage (V)")
plt.grid(True)
plt.legend()
plt.show()

print("Sampled voltages at 0.5, 0.75, 1.0 µs:", [f"{v:.2f} V" for v in vals])
print("Decoded bits (threshold 1 V):", decoded)
